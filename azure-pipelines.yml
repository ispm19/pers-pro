# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: 'Default'  

variables:
  TAG: '$(Build.BuildId)'

stages:

# Stage 1: Analyze
- stage: Analyze
  displayName: 'SonarQ Analysis'
  jobs:
  - job: SonarAnalysis
    displayName: 'SonarQube Analysis Job'
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Instalar Node.js'

    - script: npm ci
      displayName: 'Instalar dependencias'

    - task: SonarQubePrepare@7
      inputs:
        SonarQube: 'svc-son'
        scannerMode: 'Other'
        configMode: 'manual'
        extraProperties: |
          sonar.projectKey=react-nginx-app
          sonar.projectName=React NGINX App
          sonar.sources=src
          sonar.exclusions=node_modules/**,build/**,dist/**
          sonar.javascript.lcov.reportPaths=coverage/lcov.info
      displayName: 'Preparar SonarQube'

    - task: SonarQubeAnalyze@7
      name: sonarAnalysis
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'
      continueOnError: true
      displayName: 'Ejecutar analisis SonarQube'

    - task: SonarQubePublish@7
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publicar resultados SonarQube'

    - script: echo "El analisis SonarQube fallo. No se compilarÃ¡ la aplicacion."
      condition: failed()
      displayName: 'Mensaje: Analisis Fallido'

# Stage 2: Build (solo si el analisis paso)
- stage: Build
  displayName: 'Compilar Aplicacion'
  dependsOn: Analyze
  condition: succeeded()
  jobs:
  - job: BuildApp
    displayName: 'Job de Compilacion React'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Instalar Node.js'

    - script: npm ci
      displayName: 'Instalar dependencias'

    - script: |
        echo "Analisis exitoso. Compilando aplicacion..."
        npm run build
      displayName: 'Compilar app React'

# Stage 3: Docker Build & Push
- stage: Docker
  displayName: 'Docker Build and Push'
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - job: DockerBuildPush
    displayName: 'Docker Build & Push Job'
    steps:

    - task: Docker@2
      displayName: 'Login en Docker Registry'
      inputs:
        containerRegistry: 'svc-docker'
        command: 'login'

    - task: Docker@2
      displayName: 'Construir imagen Docker'
      inputs:
        command: build
        Dockerfile: '**/Dockerfile'
        repository: $(IMAGE_NAME)
        tags: |
          $(TAG)
          latest

    - task: Docker@2
      displayName: 'Push imagen Docker'
      inputs:
        command: push
        repository: $(IMAGE_NAME)
        tags: |
          $(TAG)
          latest

# Stage 4: PostBuild Scripts
- stage: PostBuild
  displayName: 'Scripts y Logs'
  dependsOn: Docker
  condition: succeeded('Docker')
  jobs:
  - job: RunScripts
    displayName: 'Job de Scripts y Logs'
    steps:
    - script: |
        echo Ejecutando Hola Mundo en paralelo:
        for /L %%i in (1,1,10) do (
          start "" cmd /c "echo Hola Mundo %%i"
        )
      displayName: 'Hola Mundo en paralelo'

    - script: |
        if not exist logs mkdir logs
        for /L %%i in (1,1,10) do (
          echo %DATE% %TIME% > logs\log_%%i.txt
        )
        echo Contenido de los archivos:
        type logs\*.txt
      displayName: 'Crear archivos con fecha'
